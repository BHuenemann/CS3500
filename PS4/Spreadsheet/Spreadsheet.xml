<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:SS.CircularException">
            <summary>
            Thrown to indicate that a change to a cell will cause a circular dependency.
            </summary>
        </member>
        <member name="T:SS.InvalidNameException">
            <summary>
            Thrown to indicate that a name parameter was either null or invalid.
            </summary>
        </member>
        <member name="T:SS.SpreadsheetReadWriteException">
            <summary>
            Thrown to indicate that a read or write attempt has failed.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetReadWriteException.#ctor(System.String)">
            <summary>
            Creates the exception with a message
            </summary>
        </member>
        <member name="T:SS.AbstractSpreadsheet">
            <summary>
            An AbstractSpreadsheet object represents the state of a simple spreadsheet.  A 
            spreadsheet consists of an infinite number of named cells.
            
            A string is a cell name if and only if it consists of one or more letters,
            followed by one or more digits AND it satisfies the predicate IsValid.
            For example, "A15", "a15", "XY032", and "BC7" are cell names so long as they
            satisfy IsValid.  On the other hand, "Z", "X_", and "hello" are not cell names,
            regardless of IsValid.
            
            Any valid incoming cell name, whether passed as a parameter or embedded in a formula,
            must be normalized with the Normalize method before it is used by or saved in 
            this spreadsheet.  For example, if Normalize is s => s.ToUpper(), then
            the Formula "x3+a5" should be converted to "X3+A5" before use.
            
            A spreadsheet contains a cell corresponding to every possible cell name.  
            In addition to a name, each cell has a contents and a value.  The distinction is
            important.
            
            The contents of a cell can be (1) a string, (2) a double, or (3) a Formula.  If the
            contents is an empty string, we say that the cell is empty.  (By analogy, the contents
            of a cell in Excel is what is displayed on the editing line when the cell is selected.)
            
            In a new spreadsheet, the contents of every cell is the empty string.
             
            The value of a cell can be (1) a string, (2) a double, or (3) a FormulaError.  
            (By analogy, the value of an Excel cell is what is displayed in that cell's position
            in the grid.)
            
            If a cell's contents is a string, its value is that string.
            
            If a cell's contents is a double, its value is that double.
            
            If a cell's contents is a Formula, its value is either a double or a FormulaError,
            as reported by the Evaluate method of the Formula class.  The value of a Formula,
            of course, can depend on the values of variables.  The value of a variable is the 
            value of the spreadsheet cell it names (if that cell's value is a double) or 
            is undefined (otherwise).
            
            Spreadsheets are never allowed to contain a combination of Formulas that establish
            a circular dependency.  A circular dependency exists when a cell depends on itself.
            For example, suppose that A1 contains B1*2, B1 contains C1*2, and C1 contains A1*2.
            A1 depends on B1, which depends on C1, which depends on A1.  That's a circular
            dependency.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.IsValid">
            <summary>
            Method used to determine whether a string that consists of one or more letters
            followed by one or more digits is a valid variable name.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Normalize">
            <summary>
            Method used to convert a cell name to its standard form.  For example,
            Normalize might convert names to upper case.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Version">
            <summary>
            Version information
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an abstract spreadsheet by recording its variable validity test,
            its normalization method, and its version information.  The variable validity
            test is used throughout to determine whether a string that consists of one or
            more letters followed by one or more digits is a valid cell name.  The variable
            equality test should be used thoughout to determine whether two variables are
            equal.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>
            cell name goes here
            </name>
            <contents>
            cell contents goes here
            </contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown,
                  and no change is made to the spreadsheet.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a list consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            The contents of the named cell becomes number.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            The contents of the named cell becomes text.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException, and no change is made to the spreadsheet.
            
            Otherwise, the contents of the named cell becomes formula. The method returns a
            list consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetDirectDependents(System.String)">
            <summary>
            Returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.Collections.Generic.ISet{System.String})">
            <summary>
            Requires that names be non-null.  Also requires that if names contains s,
            then s must be a valid non-null cell name.
            
            If any of the named cells are involved in a circular dependency,
            throws a CircularException.
            
            Otherwise, returns an enumeration of the names of all cells whose values must
            be recalculated, assuming that the contents of each cell named in names has changed.
            The names are enumerated in the order in which the calculations should be done.  
            
            For example, suppose that 
            A1 contains 5
            B1 contains 7
            C1 contains the formula A1 + B1
            D1 contains the formula A1 * C1
            E1 contains 15
            
            If A1 and B1 have changed, then A1, B1, and C1, and D1 must be recalculated,
            and they must be recalculated in either the order A1,B1,C1,D1 or B1,A1,C1,D1.
            The method will produce one of those enumerations.
            
            Please note that this method depends on the abstract GetDirectDependents.
            It won't work until GetDirectDependents is implemented correctly.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.String)">
            <summary>
            A convenience method for invoking the other version of GetCellsToRecalculate
            with a singleton set of names.  See the other version for details.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Visit(System.String,System.String,System.Collections.Generic.ISet{System.String},System.Collections.Generic.LinkedList{System.String})">
            <summary>
            A helper for the GetCellsToRecalculate method.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SS.Spreadsheet" -->
        <member name="F:SS.Spreadsheet.Dependencies">
            <summary>
            Private class to store the dependencies between the cells. It maps cell names
            to the cell's dependents and dependees.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.Cells">
            <summary>
            Private dictionary to map between the cell names (keys) and the actual cells. This
            way the cells can be accessed easily and there can't be any repeats.
            </summary>
        </member>
        <member name="P:SS.Spreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor">
            <summary>
            Constructs an abstract spreadsheet by setting it's variable validity test
            to always return true, it's normalization to the identity method, and the
            version to "default".
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an abstract spreadsheet by recording its variable validity test,
            its normalization method, and its version information.  The variable validity
            test is used throughout to determine whether a string that consists of one or
            more letters followed by one or more digits is a valid cell name.
            </summary>
            <param name="isValid">Method to determine if a cell name is valid</param>
            <param name="normalize">Method to define a standard form for all cell names</param>
            <param name="version">Version of the spreadsheet being created</param>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an abstract spreadsheet by recording the file path that contains the
            contents for the spreadsheet, its variable validity test, its normalization method,
            and its version information. It reads a file and thows an accurate
            SpreadsheetReadWriteException if any errors occur. It also throws an exception if
            the version of file and version specified don't match. The values from the file are
            inserted into the spreadsheet as cells. The variable validity test is used throughout
            to determine whether a string that consists of one or more letters followed by one
            or more digits is a valid cell name.
            </summary>
            <param name="filePath">String path of the file being read and converted to a spreadsheet</param>
            <param name="isValid">Method to determine if a cell name is valid</param>
            <param name="normalize">Method to define a standard form for all cell names</param>
            <param name="version">Version of the spreadsheet being created</param>
        </member>
        <member name="M:SS.Spreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
            <param name="filename">String name of the file being read</param>
            <returns>Returns a string containing the version of the spreadsheet XML file</returns>
        </member>
        <member name="M:SS.Spreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>
            cell name goes here
            </name>
            <contents>
            cell contents goes here
            </contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
            <param name="filename">String name of the file being written to</param>
        </member>
        <member name="M:SS.Spreadsheet.ReadFileAndCheckVersion(System.String,System.String)">
            <summary>
            This method inputs a file name and a version. First it checks if the file has the same
            version as the one specified and throws an error if it does. After this, it reads in the
            
            </summary>
            <param name="filePath"></param>
            <param name="version"></param>
        </member>
        <member name="M:SS.Spreadsheet.CheckPreviousElement(System.Int32,System.Int32)">
            <summary>
            Helper method for checking to see if the current value matches the correct condition.
            If they don't match, it throws a spreadsheetReadWriteException.
            </summary>
            <param name="currentValue">Value that should be compared</param>
            <param name="correctCondition">Condition that the value should match</param>
        </member>
        <member name="M:SS.Spreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
            <param name="name">Name of the cell being accessed</param>
            <returns>Value of the cell being accessed</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
            <returns>Enumerable of all nonempty cells</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            
            If the name is valid but not in the spreadsheet, it returns an empty string.
            </summary>
            <param name="name">Name of the cell being accessed</param>
            <returns>Contents of the cell being accessed</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown,
                  and no change is made to the spreadsheet.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a list consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            </summary>
            <param name="name">Name of the cell that should be set</param>
            <param name="content">Content the cell should be set to</param>
            <returns></returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
            <param name="name">Name of the cell being set</param>
            <param name="number">Value the cell should be set to</param>
            <returns>List of cells that depend on the named cell</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            If text is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if the text is empty it removes the dependencies and then removes
            the cell.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
            <param name="name">Name of the cell being set</param>
            <param name="text">Text the cell should be set to</param>
            <returns>List of cells that depend on the named cell</returns>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If the formula parameter is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException, and no change is made to the spreadsheet.
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            list consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
            <param name="name">Name of the cell being set</param>
            <param name="formula">Formula the cell should be set to</param>
            <returns>List of cells that depend on the named cell</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetDirectDependents(System.String)">
            <summary>
            Returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
            <param name="name">Name of the cell being accessed</param>
            <returns>An IEnumerable consisting of cells that directly depend on the named cell</returns>
        </member>
        <member name="M:SS.Spreadsheet.CellValueLookup(System.String)">
            <summary>
            Lookup formula to be passed into a formula evaluate method. It returns the value of the inputted
            cell as a double. If the cell's value is a string or FormulaError, it throws an ArgumentException.
            </summary>
            <param name="cell">Name of cell that's being looked up</param>
            <returns>Value of the cell as a double</returns>
        </member>
        <member name="M:SS.Spreadsheet.CellNameExceptionHandling(System.String)">
            <summary>
            Helper method that takes in a string and makes sure that it's valid and that it isn't null. If
            it's either invalid or null, it throws an InvalidNameException. This is used to test cell name
            inputs.
            </summary>
            <param name="s">Name that shoudl be tested (string)</param>
        </member>
        <member name="M:SS.Spreadsheet.IsNameValid(System.String)">
            <summary>
            Tests if a string fits the format of a cell name. This format is that it is one or more letters
            followed by one or more digits.
            </summary>
            <param name="s">String to be tested</param>
            <returns>Whether or not the string is a valid cell name</returns>
        </member>
        <member name="T:SS.Spreadsheet.Cell">
            <summary>
            Private cell class for the elements of the dictionary. Each cell
            stores it's name, value, and content.
            
            A cell's content can only be a double, string, or formula.
            
            A cell's value can only be a double, string, or FormulaError.
            
            The name of a cell is immutable but it's value can be changed.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.Cell.#ctor(System.String,System.Double)">
            <summary>
            Constructor for if the cell holds a double
            </summary>
            <param name="name">Name of the cell</param>
            <param name="value">Double that should be stored in the cell</param>
        </member>
        <member name="M:SS.Spreadsheet.Cell.#ctor(System.String,System.String)">
            <summary>
            Constructor for if the cell holds a string
            </summary>
            <param name="name">Name of the cell</param>
            <param name="text">String that should be stored in the cell</param>
        </member>
        <member name="M:SS.Spreadsheet.Cell.#ctor(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            Constructor for if the cell holds a formula. It calculates the value in the SetContentsOfCell
            method.
            </summary>
            <param name="name">Name of the cell</param>
            <param name="formula">Formula that should be stored in the cell</param>
        </member>
        <member name="P:SS.Spreadsheet.Cell.Name">
            <summary>
            Immutable name property of the cell. This way the only way to change the name is by creating
            a new cell.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.Cell.CellContent">
            <summary>
            Content the cell is storing.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.Cell.CellValue">
            <summary>
            Value that the cell is storing.
            </summary>
        </member>
    </members>
</doc>
